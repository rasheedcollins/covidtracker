[{"/Users/macuser/covid-19-tracker/src/index.js":"1","/Users/macuser/covid-19-tracker/src/InfoBox.js":"2","/Users/macuser/covid-19-tracker/src/Map.js":"3","/Users/macuser/covid-19-tracker/src/Table.js":"4","/Users/macuser/covid-19-tracker/src/util.js":"5","/Users/macuser/covid-19-tracker/src/LineGraph.js":"6","/Users/macuser/covid-19-tracker/src/App.js":"7"},{"size":518,"mtime":1609730350218,"results":"8","hashOfConfig":"9"},{"size":968,"mtime":1609729180419,"results":"10","hashOfConfig":"9"},{"size":598,"mtime":1609703339358,"results":"11","hashOfConfig":"9"},{"size":637,"mtime":1609701779047,"results":"12","hashOfConfig":"9"},{"size":2113,"mtime":1609729176850,"results":"13","hashOfConfig":"9"},{"size":2747,"mtime":1609729179239,"results":"14","hashOfConfig":"9"},{"size":5019,"mtime":1609730283445,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"fvcf7l",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"19"},"/Users/macuser/covid-19-tracker/src/index.js",["35","36"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Button } from '@material-ui/core';\nimport InfoBox from \"./InfoBox\";\n\n\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n \n    <App />\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n",["37","38"],"/Users/macuser/covid-19-tracker/src/InfoBox.js",[],"/Users/macuser/covid-19-tracker/src/Map.js",["39"],"import React from \"react\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ countries, casesType={casesType}, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <MapContainer center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default Map;","/Users/macuser/covid-19-tracker/src/Table.js",[],"/Users/macuser/covid-19-tracker/src/util.js",[],"/Users/macuser/covid-19-tracker/src/LineGraph.js",["40","41"],"import React, {useState, useEffect} from 'react'\nimport {Line} from \"react-chartjs-2\";\nimport { borderColor } from '@material-ui/system';\nimport { numericLiteral } from '@babel/types';\nimport numeral from \"numeral\";\n\n// Gathered from Chart.JS, conveys line graph.\nconst options = {\n    legend: {\n      display: false,\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n      callbacks: {\n        label: function (tooltipItem, data) {\n          return numeral(tooltipItem.value).format(\"+0,0\");\n        },\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            format: \"MM/DD/YY\",\n            tooltipFormat: \"ll\",\n          },\n        },\n      ],\n      yAxes: [\n        {\n          gridLines: {\n            display: false,\n          },\n          ticks: {\n            // Include a dollar sign in the ticks\n            callback: function (value, index, values) {\n              return numeral(value).format(\"0a\");\n            },\n          },\n        },\n      ],\n    },\n  };\n\n// Determines data represented on X-Y coordinates in line graph.\n  const buildChartData = (data, casesType=\"cases\") => {\n    let chartData = [];\n    let lastDataPoint;\n    for (let date in data.cases) {\n      if (lastDataPoint) {\n        let newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint,\n        };\n        chartData.push(newDataPoint);\n      }\n      lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n  };\n\n  /**  Fetches data from disease.sh API to represent line graph\n   *  containing an influx of new COVID-19 cases over time.\n   */\nfunction LineGraph({ casesType=\"cases\", ...props }) {\n    const [data, setData] = useState({});\n  \n    useEffect(() => {\n      const fetchData = async () => {\n        await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n          .then((response) => {\n            return response.json();\n          })\n          .then((data) => {\n            let chartData = buildChartData(data, casesType);\n            setData(chartData);\n            console.log(chartData);\n            // buildChart(chartData);\n          });\n      };\n  \n      fetchData();\n    }, [casesType]);\n\n   \n  return (\n    <div className = {props.className}>\n      {data && data.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;","/Users/macuser/covid-19-tracker/src/App.js",["42"],"import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  // Fetch and store cumulative COVID-19 data worldwide\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n   // Fetch and store COVID-19 data for particular countries\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          // Uses JSON response and maps data from each country\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  console.log(casesType);\n\n  // Function for onClick dropdown change\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    /** If the selected dropdown is worldwide,\n     * data from first link is fetched, else, data from\n     * second link is fetched.\n     */\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n      //  setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>DAILY COVID-19 TRACKER</h1>\n     {\n       /* Material UI dropdown box \n       with country selection as dropdown. */\n     }\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n             {\n       /* First MenuItem (dropdown item) is Worldwide.\n       Afterwards, each country is mapped to a MenuItem */\n     }\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        {\n       /* InfoBoxes containing dynamic case data. */\n     }\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n      \n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent>\n          {\n            // Table and Line Graph\n          }\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n            <LineGraph className=\"app__graph\" casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;",{"ruleId":"43","severity":1,"message":"44","line":5,"column":10,"nodeType":"45","messageId":"46","endLine":5,"endColumn":16},{"ruleId":"43","severity":1,"message":"47","line":6,"column":8,"nodeType":"45","messageId":"46","endLine":6,"endColumn":15},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":6,"column":38,"nodeType":"45","messageId":"54","endLine":6,"endColumn":47},{"ruleId":"43","severity":1,"message":"55","line":3,"column":10,"nodeType":"45","messageId":"46","endLine":3,"endColumn":21},{"ruleId":"43","severity":1,"message":"56","line":4,"column":10,"nodeType":"45","messageId":"46","endLine":4,"endColumn":24},{"ruleId":"43","severity":1,"message":"57","line":25,"column":21,"nodeType":"45","messageId":"46","endLine":25,"endColumn":33},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'InfoBox' is defined but never used.","no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-use-before-define","'casesType' was used before it was defined.","usedBeforeDefined","'borderColor' is defined but never used.","'numericLiteral' is defined but never used.","'setMapCenter' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]